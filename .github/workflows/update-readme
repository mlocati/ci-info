#!/bin/sh

set -o nounset
set -o errexit

printf 'Checking GITHUB_EVENT_NAME... '
if test -z "${GITHUB_EVENT_NAME:-}"; then
    echo 'Missing GITHUB_EVENT_NAME environment variable' >&2
    exit 1
fi
if test "$GITHUB_EVENT_NAME" != 'push'; then
    echo "Expected push event, detected $GITHUB_EVENT_NAME"
    exit 1
fi
echo 'passed.'

printf 'Checking GITHUB_REF... '
if test -z "${GITHUB_REF:-}"; then
    echo 'Missing GITHUB_REF environment variable' >&2
    exit 1
fi
if test "$GITHUB_REF" != 'refs/heads/master'; then
    echo "Expected refs/heads/master, detected $GITHUB_REF"
    exit 1
fi
echo 'passed.'

printf 'Checking currently checked out branch... '
branch="$(git branch --show-current)"
if test "$branch" != 'master'; then
    echo "Expected master, detected $branch"
    exit 1
fi
echo 'passed.'

printf 'Checking prospective commit author... '
if test -z "${AUTHOR_NAME:-}"; then
    echo 'Missing AUTHOR_NAME environment variable' >&2
    exit 1
fi
if test -z "${AUTHOR_EMAIL:-}"; then
    echo 'Missing AUTHOR_EMAIL environment variable' >&2
    exit 1
fi
echo 'passed.'

printf 'Checking DEPLOY_KEY... '
if test -z "${DEPLOY_KEY:-}"; then
    echo 'Missing DEPLOY_KEY environment variable' >&2
    exit 1
fi
echo 'passed.'

printf 'Checking GITHUB_WORKSPACE... '
if test -z "${GITHUB_WORKSPACE:-}"; then
    echo 'Missing GITHUB_WORKSPACE environment variable' >&2
    exit 1
fi
cd "$GITHUB_WORKSPACE"
echo 'passed.'

printf 'Checking ci-info --help... '
helpText="$(./bin/ci-info --help)"
if test -z "$helpText"; then
    echo 'Failed to retrieve command help text' >&2
    exit 1
fi
echo 'passed.'

echo 'Parsing README.md:'
# shellcheck disable=SC2016
BACKTICKS='```'
NEWLINE='
'
STATE_INIT=0
STATE_BEFORE=1
STATE_INSIDE=2
STATE_AFTER=3
state=$STATE_INIT
while IFS= read -r line ; do
    if test "$line" = '<!-- CI-INFO-HELP-START -->'; then
        if test $state -ne $STATE_BEFORE; then
            echo "Found opening placeholder in wrong state ($state vs $STATE_BEFORE)" >&2
            exit 1
        fi
        updatedReadme="${updatedReadme}${line}${NEWLINE}${BACKTICKS}${NEWLINE}${helpText}${NEWLINE}${BACKTICKS}${NEWLINE}"
        state=$STATE_INSIDE
        echo ' - new help text inserted'
    elif test "$line" = '<!-- CI-INFO-HELP-END -->'; then
        if test $state -ne $STATE_INSIDE; then
            echo "Found closing placeholder in wrong state ($state vs $STATE_INSIDE)" >&2
            exit 1
        fi
        updatedReadme="${updatedReadme}${line}${NEWLINE}"
        state=$STATE_AFTER
        echo ' - copy lines after placeholders'
    elif test $state -eq $STATE_INIT; then
        updatedReadme="${line}${NEWLINE}"
        state=$STATE_BEFORE
        echo ' - copy lines before placeholders'
    elif test $state -ne $STATE_INSIDE; then
        updatedReadme="${updatedReadme}${line}${NEWLINE}"
    fi
done < ./README.md
if test $state -ne $STATE_AFTER; then
    echo "Invalid state after parsing README.md ($state vs $STATE_AFTER)" >&2
    exit 1
fi

printf 'Writing contents to README.md... '
printf '%s' "$updatedReadme" > ./README.md
echo 'done.'

printf 'Checking changes in README.md... '
if git diff-index --exit-code --quiet HEAD ./README.md; then
    echo 'no changes detected.'
    exit 0
fi
echo 'changes detected.'

echo 'Configuring git author... '
git config user.name "$AUTHOR_NAME"
git config user.email "$AUTHOR_EMAIL"
echo 'done.'

echo 'Staging changes... '
git add ./README.md
echo 'done.'

echo 'Committing changes... '
git commit -m '[skip ci] Update README.md'
echo 'done.'

echo 'Configuring SSH agent... '
eval "$(ssh-agent)"
printf '%s' "$DEPLOY_KEY" | tr -d '\r' | ssh-add - >/dev/null
echo 'done.'

echo 'Pushing... '
git push origin master:master
echo 'done.'

